     1                                  ; Copyright 2021 Daniel Cazarez
     2                                  ; This program is free software, you can redistribute it and or modify it
     3                                  ; under the terms of the GNU General Public License version 3
     4                                  ; A copy of the GNU General Public License version 3 is available here: https://www.gnu.org/licenses/
     5                                  
     6                                  ; Author Name: Daniel Cazarez
     7                                  ; Author Email: danielcaz2200@csu.fullerton.edu
     8                                  
     9                                  ; Program name: Triangle Calculator v2.0
    10                                  ; Files in program: Triangle.asm, Pythagoras.cpp, r.sh
    11                                  ; System requirements: Ubuntu Linux on an x86 machine
    12                                  ; Programming languages: x86 Assembly, C++ and BASH
    13                                  ; Date program development began: Aug 25, 2021
    14                                  ; Date finished: Sept 2, 2021
    15                                  ; Status: No known errors
    16                                  
    17                                  ; Purpose: To calculate the area and hypotenuse of a triangle, based on user input.
    18                                  ; Afterwards, the ASM program will return the value to the C++ caller.
    19                                  
    20                                  ; File name: Triangle.asm
    21                                  ; Language: x86 Assembly
    22                                  ; This module receives no arguments.
    23                                  
    24                                  ; Translation information
    25                                  ; Compile this file: nasm -f elf64 -l triangle.lis -o triangle.o triangle.asm
    26                                  ; Link the two files: g++ -m64 -std=c++14 -fno-pie -no-pie -o calculator.out pythagoras.o triangle.o
    27                                  ; ./calculator.out is the executable
    28                                  
    29                                  
    30                                  ; Declare external functions & make 'triangle' visible to C++ & declare constant
    31                                  STRING_LEN equ 256 ; Max string length
    32                                  extern printf
    33                                  extern scanf
    34                                  extern fgets
    35                                  extern stdin
    36                                  extern strlen
    37                                  
    38                                  global triangle
    39                                  
    40                                  segment .data
    41                                  ; Strings and formats
    42                                  
    43                                  ; Format for single float
    44 00000000 256C6600                float_format: db "%lf", 0
    45                                  
    46                                  ; Format for two floats
    47 00000004 256C6620256C6600        two_float_format: db "%lf %lf", 0
    48                                  
    49                                  ; Space char
    50 0000000C 2000                    space: db " ", 0
    51                                  
    52                                  ; If input is invalid
    53 0000000E 41206E756D62657220-     invalid: db "A number below or equal to zero was detected, please input postive floats.", 10, 0
    53 00000017 62656C6F77206F7220-
    53 00000020 657175616C20746F20-
    53 00000029 7A65726F2077617320-
    53 00000032 64657465637465642C-
    53 0000003B 20706C656173652069-
    53 00000044 6E70757420706F7374-
    53 0000004D 69766520666C6F6174-
    53 00000056 732E0A00           
    54                                  
    55                                  ; String format for scanf, printf
    56 0000005A 257300                  format: db "%s", 0
    57                                  
    58 0000005D 506C6561736520656E-     prompt_name: db "Please enter your last name: ", 0
    58 00000066 74657220796F757220-
    58 0000006F 6C617374206E616D65-
    58 00000078 3A2000             
    59                                  
    60 0000007B 506C6561736520656E-     prompt_title: db "Please enter your title: ", 0
    60 00000084 74657220796F757220-
    60 0000008D 7469746C653A2000   
    61                                  
    62 00000095 506C6561736520656E-     prompt_sides: db "Please enter the sides of your triangle separated by a space: ", 0
    62 0000009E 746572207468652073-
    62 000000A7 69646573206F662079-
    62 000000B0 6F757220747269616E-
    62 000000B9 676C65207365706172-
    62 000000C2 617465642062792061-
    62 000000CB 2073706163653A2000 
    63                                  
    64 000000D4 546865206172656120-     display_area: db "The area of this triangle is ", 0
    64 000000DD 6F6620746869732074-
    64 000000E6 7269616E676C652069-
    64 000000EF 732000             
    65                                  
    66 000000F2 207371756172652075-     square_units: db " square units.", 10, 0
    66 000000FB 6E6974732E0A00     
    67                                  
    68 00000102 546865206879706F74-     display_hyp: db "The hypotenuse is ", 0
    68 0000010B 656E75736520697320-
    68 00000114 00                 
    69                                  
    70 00000115 20756E6974732E0A00      units: db " units.", 10, 0
    71                                  
    72 0000011E 506C6561736520656E-     exit_message: db "Please enjoy your triangles ", 0
    72 00000127 6A6F7920796F757220-
    72 00000130 747269616E676C6573-
    72 00000139 2000               
    73                                  
    74                                  segment .bss
    75                                  ; Reserve 256 bytes for name and title each
    76                                  
    77 00000000 <res 00000100>          name: resb STRING_LEN
    78                                  
    79 00000100 <res 00000100>          title: resb STRING_LEN
    80                                  
    81                                  segment .text
    82                                  ; Entrance point of program
    83                                  triangle:
    84 00000000 55                          push rbp ; Save base pointer to stack
    85 00000001 4889E5                      mov rbp, rsp ; Move rsp into rbp
    86                                  
    87 00000004 57                          push rdi ; Backup rdi
    88 00000005 56                          push rsi ; Backup rsi
    89 00000006 52                          push rdx ; Backup rdx
    90 00000007 51                          push rcx ; Backup rcx
    91 00000008 4150                        push r8  ; Backup r8
    92 0000000A 4151                        push r9 ; Backup r9
    93 0000000C 4152                        push r10 ; Backup r10
    94 0000000E 4153                        push r11 ; Backup r11
    95 00000010 4154                        push r12 ; Backup r12
    96 00000012 4155                        push r13 ; Backup r13
    97 00000014 4156                        push r14 ; Backup r14
    98 00000016 4157                        push r15 ; Backup r15
    99 00000018 53                          push rbx ; Backup rbx
   100 00000019 9C                          pushf ; Backup rflags
   101                                  
   102 0000001A B800000000                  mov rax, 0 ; Tell printf we have 0 floating point args
   103 0000001F 48BF-                       mov rdi, format ; Load format into rdi
   103 00000021 [5A00000000000000] 
   104 00000029 48BE-                       mov rsi, prompt_name ; Load message into rdi
   104 0000002B [5D00000000000000] 
   105 00000033 E8(00000000)                call printf
   106                                  
   107                                      ; Name input using fgets
   108 00000038 B800000000                  mov rax, 0 ; Tell fgets we have 0 floating point args
   109 0000003D 48BF-                       mov rdi, name ; Load format into rdi
   109 0000003F [0000000000000000] 
   110 00000047 BE00010000                  mov rsi, STRING_LEN ; String length
   111 0000004C 488B1425[00000000]          mov rdx, [stdin] ; Pass in value of stdin
   112 00000054 E8(00000000)                call fgets
   113                                  
   114                                      ;  Remove trailing newline from fgets
   115 00000059 B800000000                  mov rax, 0
   116 0000005E 48BF-                       mov rdi, name
   116 00000060 [0000000000000000] 
   117 00000068 E8(00000000)                call strlen
   118 0000006D 4883E801                    sub rax, 1 ; length stored in rax, go back 1 byte
   119 00000071 C680[00000000]00            mov byte [name + rax], 0
   120                                  
   121 00000078 B800000000                  mov rax, 0 ; Tell printf we have 0 floating point args
   122 0000007D 48BF-                       mov rdi, format ; Load format into rdi
   122 0000007F [5A00000000000000] 
   123 00000087 48BE-                       mov rsi, prompt_title ; Load message into rdi
   123 00000089 [7B00000000000000] 
   124 00000091 E8(00000000)                call printf
   125                                  
   126                                      ; Title input using fgets
   127 00000096 B800000000                  mov rax, 0 ; Tell fgets we have 0 floating point args
   128 0000009B 48BF-                       mov rdi, title ; Load format into rdi
   128 0000009D [0001000000000000] 
   129 000000A5 BE00010000                  mov rsi, STRING_LEN ; String length
   130 000000AA 488B1425[00000000]          mov rdx, [stdin] ; Pass in value of stdin
   131 000000B2 E8(00000000)                call fgets
   132                                  
   133                                      ;  Remove trailing newline from fgets
   134 000000B7 B800000000                  mov rax, 0
   135 000000BC 48BF-                       mov rdi, title
   135 000000BE [0001000000000000] 
   136 000000C6 E8(00000000)                call strlen
   137 000000CB 4883E801                    sub rax, 1 ; length stored in rax, go back 1 byte
   138 000000CF C680[00010000]00            mov byte [title + rax], 0
   139                                  
   140                                      ; If inputs are negative, restart here
   141                                      restart: 
   142 000000D6 B800000000                  mov rax, 0 ; Tell printf we have 0 floating point args
   143 000000DB 48BF-                       mov rdi, format ; Load format into rdi
   143 000000DD [5A00000000000000] 
   144 000000E5 48BE-                       mov rsi, prompt_sides ; Load message into rdi
   144 000000E7 [9500000000000000] 
   145 000000EF E8(00000000)                call printf
   146                                  
   147                                      ; 16 bytes in total made on stack
   148                                      ; Create space for 2 float numbers, i.e. push two quadwords on the stack
   149 000000F4 6AFF                        push qword -1
   150 000000F6 6AFE                        push qword -2
   151                                  
   152 000000F8 B800000000                  mov rax, 0 ; Since we created space earlier via pushes, we do not need to specify the amount of float arguments
   153 000000FD 48BF-                       mov rdi, two_float_format ;"%lf %lf"
   153 000000FF [0400000000000000] 
   154 00000107 4889E6                      mov rsi, rsp ; rsi points to first quadword on the stack
   155 0000010A 4889E2                      mov rdx, rsp
   156 0000010D 4883C208                    add rdx, 8 ; rdx points to second quadword on the stack
   157 00000111 E8(00000000)                call scanf
   158                                  
   159 00000116 F2440F103C24                movsd xmm15, [rsp] ; Move first input into xmm15
   160 0000011C F2440F10742408              movsd xmm14, [rsp+8] ; Move second input into xmm14, at address rsp + 8
   161                                      
   162                                      ; Reverse previous push statements
   163 00000123 58                          pop rax
   164 00000124 58                          pop rax
   165                                      
   166                                      ; Zero-out xmm11, all bits = 0
   167 00000125 66450F57DB                  xorpd xmm11, xmm11
   168                                      
   169                                      ; check xmm15 against xmm11, jump if xmm15 < xmm11
   170 0000012A 66450F2EFB                  ucomisd xmm15, xmm11
   171 0000012F 0F8655010000                jbe negative
   172                                      
   173                                      ; check xmm14 against xmm11, jump if xmm14 < xmm11
   174 00000135 66450F2EF3                  ucomisd xmm14, xmm11
   175 0000013A 0F864A010000                jbe negative
   176                                      
   177                                  
   178 00000140 48B800000000000000-         mov rax, 0x4000000000000000; Move 2.0 into rax
   178 00000149 40                 
   179 0000014A 50                          push rax ; Push rax to the top of the stack
   180 0000014B F2440F102C24                movsd xmm13, [rsp] ; Move value at rsp (top of stack, 2.0) into xmm13
   181 00000151 58                          pop rax ; Reverse push
   182                                  
   183                                      ; Make backups to use for hypotenuse
   184 00000152 F2450F10E7                  movsd xmm12, xmm15 ; xmm12 = xmm15 val
   185                                  
   186                                      ; Begin computations for area
   187 00000157 F2450F59E6                  mulsd xmm12, xmm14 ; xmm12 *= xmm14
   188 0000015C F2450F5EE5                  divsd xmm12, xmm13 ; xmm12 /= xmm13 (xmm13 = 2.0) -> xmm12 now holds area
   189                                  
   190 00000161 B800000000                  mov rax, 0
   191 00000166 48BF-                       mov rdi, display_area ; "The area of this triangle is "
   191 00000168 [D400000000000000] 
   192 00000170 E8(00000000)                call printf
   193                                  
   194 00000175 B801000000                  mov rax, 1 ; Tell printf we have a float argument
   195 0000017A 48BF-                       mov rdi, float_format ; "%lf"
   195 0000017C [0000000000000000] 
   196 00000184 F2410F10C4                  movsd xmm0, xmm12 ; xmm12 placed in xmm0 to print
   197 00000189 E8(00000000)                call printf
   198                                  
   199 0000018E B800000000                  mov rax, 0 ; Tell printf we have 0 floating point args
   200 00000193 48BF-                       mov rdi, format ; inserts newline char
   200 00000195 [5A00000000000000] 
   201 0000019D 48BE-                       mov rsi, square_units ; " square units."
   201 0000019F [F200000000000000] 
   202 000001A7 E8(00000000)                call printf
   203                                  
   204 000001AC F2450F59FF                  mulsd xmm15, xmm15 ; xmm15 squared
   205 000001B1 F2450F59F6                  mulsd xmm14, xmm14 ; xmm14 squared
   206                                  
   207 000001B6 F2450F58F7                  addsd xmm14, xmm15 ; xmm14 += xmm15 (a^2 + b^2)
   208                                  
   209 000001BB F2450F51F6                  sqrtsd xmm14, xmm14 ; sqrt(xmm14)
   210                                  
   211 000001C0 B800000000                  mov rax, 0 ; Tell printf we have 0 floating point args
   212 000001C5 48BF-                       mov rdi, display_hyp ; "The hypotenuse is "
   212 000001C7 [0201000000000000] 
   213 000001CF E8(00000000)                call printf
   214                                  
   215 000001D4 B801000000                  mov rax, 1 ; Tell scanf we have 1 floating point argument
   216 000001D9 48BF-                       mov rdi, float_format ; "%lf"
   216 000001DB [0000000000000000] 
   217 000001E3 F2410F10C6                  movsd xmm0, xmm14 ; xmm14 placed in xmm0 to print
   218 000001E8 E8(00000000)                call printf
   219                                  
   220 000001ED B800000000                  mov rax, 0 ; Tell printf we have 0 floating point args
   221 000001F2 48BF-                       mov rdi, format ; Load format into rdi
   221 000001F4 [5A00000000000000] 
   222 000001FC 48BE-                       mov rsi, units ; " units."
   222 000001FE [1501000000000000] 
   223 00000206 E8(00000000)                call printf
   224                                  
   225 0000020B B800000000                  mov rax, 0 ; Tell printf we have 0 floating point args
   226 00000210 48BF-                       mov rdi, format ; Load format into rdi
   226 00000212 [5A00000000000000] 
   227 0000021A 48BE-                       mov rsi, exit_message ; "Please enjoy your triangles "
   227 0000021C [1E01000000000000] 
   228 00000224 E8(00000000)                call printf
   229                                  
   230 00000229 B800000000                  mov rax, 0 ; Tell printf we have 0 floating point args
   231 0000022E 48BF-                       mov rdi, format ; Load format into rdi
   231 00000230 [5A00000000000000] 
   232 00000238 48BE-                       mov rsi, title ; Title from user input
   232 0000023A [0001000000000000] 
   233 00000242 E8(00000000)                call printf
   234                                  
   235 00000247 B800000000                  mov rax, 0 ; Tell printf we have 0 floating point args
   236 0000024C 48BF-                       mov rdi, format ; Load format into rdi
   236 0000024E [5A00000000000000] 
   237 00000256 48BE-                       mov rsi, space ; Load spcace char into rdi
   237 00000258 [0C00000000000000] 
   238 00000260 E8(00000000)                call printf
   239                                  
   240 00000265 B800000000                  mov rax, 0 ; Tell printf we have 0 floating point args
   241 0000026A 48BF-                       mov rdi, format ; Load format into rdi
   241 0000026C [5A00000000000000] 
   242 00000274 48BE-                       mov rsi, name ; Name from user input
   242 00000276 [0000000000000000] 
   243 0000027E E8(00000000)                call printf
   244                                  
   245                                      ; Move final value into xmm0 to be returned
   246 00000283 F2410F10C6                  movsd xmm0, xmm14
   247                                      
   248 00000288 EB23                        jmp end ; jump to end block
   249                                      
   250                                      ; If user input is invalid, run this block
   251                                      negative:
   252 0000028A B800000000                  mov rax, 0
   253 0000028F 48BF-                       mov rdi, format
   253 00000291 [5A00000000000000] 
   254 00000299 48BE-                       mov rsi, invalid
   254 0000029B [0E00000000000000] 
   255 000002A3 E8(00000000)                call printf
   256 000002A8 E929FEFFFF                  jmp restart
   257                                      
   258                                      end:
   259 000002AD 9D                          popf ; Restore rflags
   260 000002AE 5B                          pop rbx ; Restore rbx
   261 000002AF 415F                        pop r15 ; Restore r15
   262 000002B1 415E                        pop r14 ; Restore r14
   263 000002B3 415D                        pop r13 ; Restore r13
   264 000002B5 415C                        pop r12 ; Restore r12
   265 000002B7 415B                        pop r11 ; Restore r11
   266 000002B9 415A                        pop r10 ; Restore r10
   267 000002BB 4159                        pop r9 ; Restore r9
   268 000002BD 4158                        pop r8 ; Restore r8
   269 000002BF 59                          pop rcx ; Restore rcx
   270 000002C0 5A                          pop rdx ; Restore rdx
   271 000002C1 5E                          pop rsi ; Restore rsi
   272 000002C2 5F                          pop rdi ; Restore rdi
   273                                  
   274 000002C3 5D                          pop rbp ; Restore rbp
   275 000002C4 C3                          ret
